// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: testsvc.proto

package testpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Combined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scalars    *Scalars    `protobuf:"bytes,1,opt,name=scalars,proto3" json:"scalars,omitempty"`
	NonScalars *NonScalars `protobuf:"bytes,2,opt,name=non_scalars,json=nonScalars,proto3" json:"non_scalars,omitempty"`
}

func (x *Combined) Reset() {
	*x = Combined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testsvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Combined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Combined) ProtoMessage() {}

func (x *Combined) ProtoReflect() protoreflect.Message {
	mi := &file_testsvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Combined.ProtoReflect.Descriptor instead.
func (*Combined) Descriptor() ([]byte, []int) {
	return file_testsvc_proto_rawDescGZIP(), []int{0}
}

func (x *Combined) GetScalars() *Scalars {
	if x != nil {
		return x.Scalars
	}
	return nil
}

func (x *Combined) GetNonScalars() *NonScalars {
	if x != nil {
		return x.NonScalars
	}
	return nil
}

type FlowMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FlowMessage) Reset() {
	*x = FlowMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testsvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMessage) ProtoMessage() {}

func (x *FlowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_testsvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMessage.ProtoReflect.Descriptor instead.
func (*FlowMessage) Descriptor() ([]byte, []int) {
	return file_testsvc_proto_rawDescGZIP(), []int{1}
}

func (x *FlowMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// FlowAction is used by TestService to control the execution of Flow endpoints.
type FlowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*FlowAction_ExpectMessage
	//	*FlowAction_ExpectClose
	//	*FlowAction_SendMessage
	//	*FlowAction_SendStatus
	//	*FlowAction_Sleep
	Action isFlowAction_Action `protobuf_oneof:"action"`
}

func (x *FlowAction) Reset() {
	*x = FlowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testsvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowAction) ProtoMessage() {}

func (x *FlowAction) ProtoReflect() protoreflect.Message {
	mi := &file_testsvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowAction.ProtoReflect.Descriptor instead.
func (*FlowAction) Descriptor() ([]byte, []int) {
	return file_testsvc_proto_rawDescGZIP(), []int{2}
}

func (m *FlowAction) GetAction() isFlowAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *FlowAction) GetExpectMessage() *FlowMessage {
	if x, ok := x.GetAction().(*FlowAction_ExpectMessage); ok {
		return x.ExpectMessage
	}
	return nil
}

func (x *FlowAction) GetExpectClose() bool {
	if x, ok := x.GetAction().(*FlowAction_ExpectClose); ok {
		return x.ExpectClose
	}
	return false
}

func (x *FlowAction) GetSendMessage() *FlowMessage {
	if x, ok := x.GetAction().(*FlowAction_SendMessage); ok {
		return x.SendMessage
	}
	return nil
}

func (x *FlowAction) GetSendStatus() *status.Status {
	if x, ok := x.GetAction().(*FlowAction_SendStatus); ok {
		return x.SendStatus
	}
	return nil
}

func (x *FlowAction) GetSleep() *durationpb.Duration {
	if x, ok := x.GetAction().(*FlowAction_Sleep); ok {
		return x.Sleep
	}
	return nil
}

type isFlowAction_Action interface {
	isFlowAction_Action()
}

type FlowAction_ExpectMessage struct {
	ExpectMessage *FlowMessage `protobuf:"bytes,1,opt,name=expect_message,json=expectMessage,proto3,oneof"`
}

type FlowAction_ExpectClose struct {
	ExpectClose bool `protobuf:"varint,2,opt,name=expect_close,json=expectClose,proto3,oneof"`
}

type FlowAction_SendMessage struct {
	SendMessage *FlowMessage `protobuf:"bytes,3,opt,name=send_message,json=sendMessage,proto3,oneof"`
}

type FlowAction_SendStatus struct {
	SendStatus *status.Status `protobuf:"bytes,4,opt,name=send_status,json=sendStatus,proto3,oneof"`
}

type FlowAction_Sleep struct {
	Sleep *durationpb.Duration `protobuf:"bytes,5,opt,name=sleep,proto3,oneof"`
}

func (*FlowAction_ExpectMessage) isFlowAction_Action() {}

func (*FlowAction_ExpectClose) isFlowAction_Action() {}

func (*FlowAction_SendMessage) isFlowAction_Action() {}

func (*FlowAction_SendStatus) isFlowAction_Action() {}

func (*FlowAction_Sleep) isFlowAction_Action() {}

var File_testsvc_proto protoreflect.FileDescriptor

var file_testsvc_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x25, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01,
	0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x52, 0x07, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x52, 0x0a, 0x6e, 0x6f,
	0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xdb, 0x02, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5b, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xc1, 0x0a, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6e, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x55, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x1a,
	0x2e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x12,
	0xb1, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x1a, 0x2f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22,
	0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x75,
	0x6e, 0x61, 0x72, 0x79, 0x2f, 0x7b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x7d, 0x2f, 0x7b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x7d, 0x12, 0xd2, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x3a,
	0x0b, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x62, 0x0b, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x22, 0x3d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x7b, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x73, 0x2e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x7d, 0x2f, 0x7b, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x1a, 0x2f, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x62, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x1a, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x61, 0x64,
	0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x12, 0x82,
	0x01, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x1a, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65,
	0x63, 0x68, 0x6f, 0x12, 0x73, 0x0a, 0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x32, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01,
	0x12, 0xa8, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x5a,
	0x1a, 0x3a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0f, 0x2f, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x77, 0x73, 0x12, 0x0c, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x08, 0x42,
	0x69, 0x44, 0x69, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x32, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x65, 0x6e, 0x62, 0x6f, 0x75, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testsvc_proto_rawDescOnce sync.Once
	file_testsvc_proto_rawDescData = file_testsvc_proto_rawDesc
)

func file_testsvc_proto_rawDescGZIP() []byte {
	file_testsvc_proto_rawDescOnce.Do(func() {
		file_testsvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_testsvc_proto_rawDescData)
	})
	return file_testsvc_proto_rawDescData
}

var file_testsvc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_testsvc_proto_goTypes = []interface{}{
	(*Combined)(nil),            // 0: grpcbridge.internal.bridgetest.testpb.Combined
	(*FlowMessage)(nil),         // 1: grpcbridge.internal.bridgetest.testpb.FlowMessage
	(*FlowAction)(nil),          // 2: grpcbridge.internal.bridgetest.testpb.FlowAction
	(*Scalars)(nil),             // 3: grpcbridge.internal.bridgetest.testpb.Scalars
	(*NonScalars)(nil),          // 4: grpcbridge.internal.bridgetest.testpb.NonScalars
	(*status.Status)(nil),       // 5: google.rpc.Status
	(*durationpb.Duration)(nil), // 6: google.protobuf.Duration
}
var file_testsvc_proto_depIdxs = []int32{
	3,  // 0: grpcbridge.internal.bridgetest.testpb.Combined.scalars:type_name -> grpcbridge.internal.bridgetest.testpb.Scalars
	4,  // 1: grpcbridge.internal.bridgetest.testpb.Combined.non_scalars:type_name -> grpcbridge.internal.bridgetest.testpb.NonScalars
	1,  // 2: grpcbridge.internal.bridgetest.testpb.FlowAction.expect_message:type_name -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 3: grpcbridge.internal.bridgetest.testpb.FlowAction.send_message:type_name -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	5,  // 4: grpcbridge.internal.bridgetest.testpb.FlowAction.send_status:type_name -> google.rpc.Status
	6,  // 5: grpcbridge.internal.bridgetest.testpb.FlowAction.sleep:type_name -> google.protobuf.Duration
	3,  // 6: grpcbridge.internal.bridgetest.testpb.TestService.UnaryUnbound:input_type -> grpcbridge.internal.bridgetest.testpb.Scalars
	3,  // 7: grpcbridge.internal.bridgetest.testpb.TestService.UnaryBound:input_type -> grpcbridge.internal.bridgetest.testpb.Scalars
	0,  // 8: grpcbridge.internal.bridgetest.testpb.TestService.UnaryCombined:input_type -> grpcbridge.internal.bridgetest.testpb.Combined
	3,  // 9: grpcbridge.internal.bridgetest.testpb.TestService.BadResponsePath:input_type -> grpcbridge.internal.bridgetest.testpb.Scalars
	0,  // 10: grpcbridge.internal.bridgetest.testpb.TestService.Echo:input_type -> grpcbridge.internal.bridgetest.testpb.Combined
	1,  // 11: grpcbridge.internal.bridgetest.testpb.TestService.UnaryFlow:input_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 12: grpcbridge.internal.bridgetest.testpb.TestService.ClientFlow:input_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 13: grpcbridge.internal.bridgetest.testpb.TestService.ServerFlow:input_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 14: grpcbridge.internal.bridgetest.testpb.TestService.BiDiFlow:input_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	3,  // 15: grpcbridge.internal.bridgetest.testpb.TestService.UnaryUnbound:output_type -> grpcbridge.internal.bridgetest.testpb.Scalars
	0,  // 16: grpcbridge.internal.bridgetest.testpb.TestService.UnaryBound:output_type -> grpcbridge.internal.bridgetest.testpb.Combined
	0,  // 17: grpcbridge.internal.bridgetest.testpb.TestService.UnaryCombined:output_type -> grpcbridge.internal.bridgetest.testpb.Combined
	0,  // 18: grpcbridge.internal.bridgetest.testpb.TestService.BadResponsePath:output_type -> grpcbridge.internal.bridgetest.testpb.Combined
	0,  // 19: grpcbridge.internal.bridgetest.testpb.TestService.Echo:output_type -> grpcbridge.internal.bridgetest.testpb.Combined
	1,  // 20: grpcbridge.internal.bridgetest.testpb.TestService.UnaryFlow:output_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 21: grpcbridge.internal.bridgetest.testpb.TestService.ClientFlow:output_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 22: grpcbridge.internal.bridgetest.testpb.TestService.ServerFlow:output_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	1,  // 23: grpcbridge.internal.bridgetest.testpb.TestService.BiDiFlow:output_type -> grpcbridge.internal.bridgetest.testpb.FlowMessage
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_testsvc_proto_init() }
func file_testsvc_proto_init() {
	if File_testsvc_proto != nil {
		return
	}
	file_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_testsvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Combined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testsvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testsvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testsvc_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FlowAction_ExpectMessage)(nil),
		(*FlowAction_ExpectClose)(nil),
		(*FlowAction_SendMessage)(nil),
		(*FlowAction_SendStatus)(nil),
		(*FlowAction_Sleep)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testsvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testsvc_proto_goTypes,
		DependencyIndexes: file_testsvc_proto_depIdxs,
		MessageInfos:      file_testsvc_proto_msgTypes,
	}.Build()
	File_testsvc_proto = out.File
	file_testsvc_proto_rawDesc = nil
	file_testsvc_proto_goTypes = nil
	file_testsvc_proto_depIdxs = nil
}
