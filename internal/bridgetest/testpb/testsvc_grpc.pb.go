// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: testsvc.proto

package testpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_UnaryUnbound_FullMethodName    = "/grpcbridge.internal.bridgetest.testpb.TestService/UnaryUnbound"
	TestService_UnaryBound_FullMethodName      = "/grpcbridge.internal.bridgetest.testpb.TestService/UnaryBound"
	TestService_UnaryCombined_FullMethodName   = "/grpcbridge.internal.bridgetest.testpb.TestService/UnaryCombined"
	TestService_BadResponsePath_FullMethodName = "/grpcbridge.internal.bridgetest.testpb.TestService/BadResponsePath"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	UnaryUnbound(ctx context.Context, in *Scalars, opts ...grpc.CallOption) (*Scalars, error)
	UnaryBound(ctx context.Context, in *Scalars, opts ...grpc.CallOption) (*Combined, error)
	UnaryCombined(ctx context.Context, in *Combined, opts ...grpc.CallOption) (*Combined, error)
	BadResponsePath(ctx context.Context, in *Scalars, opts ...grpc.CallOption) (*Combined, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) UnaryUnbound(ctx context.Context, in *Scalars, opts ...grpc.CallOption) (*Scalars, error) {
	out := new(Scalars)
	err := c.cc.Invoke(ctx, TestService_UnaryUnbound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UnaryBound(ctx context.Context, in *Scalars, opts ...grpc.CallOption) (*Combined, error) {
	out := new(Combined)
	err := c.cc.Invoke(ctx, TestService_UnaryBound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UnaryCombined(ctx context.Context, in *Combined, opts ...grpc.CallOption) (*Combined, error) {
	out := new(Combined)
	err := c.cc.Invoke(ctx, TestService_UnaryCombined_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) BadResponsePath(ctx context.Context, in *Scalars, opts ...grpc.CallOption) (*Combined, error) {
	out := new(Combined)
	err := c.cc.Invoke(ctx, TestService_BadResponsePath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	UnaryUnbound(context.Context, *Scalars) (*Scalars, error)
	UnaryBound(context.Context, *Scalars) (*Combined, error)
	UnaryCombined(context.Context, *Combined) (*Combined, error)
	BadResponsePath(context.Context, *Scalars) (*Combined, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) UnaryUnbound(context.Context, *Scalars) (*Scalars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryUnbound not implemented")
}
func (UnimplementedTestServiceServer) UnaryBound(context.Context, *Scalars) (*Combined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryBound not implemented")
}
func (UnimplementedTestServiceServer) UnaryCombined(context.Context, *Combined) (*Combined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCombined not implemented")
}
func (UnimplementedTestServiceServer) BadResponsePath(context.Context, *Scalars) (*Combined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BadResponsePath not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_UnaryUnbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scalars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UnaryUnbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UnaryUnbound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UnaryUnbound(ctx, req.(*Scalars))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UnaryBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scalars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UnaryBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UnaryBound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UnaryBound(ctx, req.(*Scalars))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UnaryCombined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Combined)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UnaryCombined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UnaryCombined_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UnaryCombined(ctx, req.(*Combined))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_BadResponsePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scalars)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).BadResponsePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_BadResponsePath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).BadResponsePath(ctx, req.(*Scalars))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcbridge.internal.bridgetest.testpb.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryUnbound",
			Handler:    _TestService_UnaryUnbound_Handler,
		},
		{
			MethodName: "UnaryBound",
			Handler:    _TestService_UnaryBound_Handler,
		},
		{
			MethodName: "UnaryCombined",
			Handler:    _TestService_UnaryCombined_Handler,
		},
		{
			MethodName: "BadResponsePath",
			Handler:    _TestService_BadResponsePath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testsvc.proto",
}
