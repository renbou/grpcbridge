// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: example.proto

package bench

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bench_Echo_FullMethodName = "/bench.Bench/Echo"
)

// BenchClient is the client API for Bench service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenchClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
}

type benchClient struct {
	cc grpc.ClientConnInterface
}

func NewBenchClient(cc grpc.ClientConnInterface) BenchClient {
	return &benchClient{cc}
}

func (c *benchClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := c.cc.Invoke(ctx, Bench_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenchServer is the server API for Bench service.
// All implementations must embed UnimplementedBenchServer
// for forward compatibility
type BenchServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
	mustEmbedUnimplementedBenchServer()
}

// UnimplementedBenchServer must be embedded to have forward compatible implementations.
type UnimplementedBenchServer struct {
}

func (UnimplementedBenchServer) Echo(context.Context, *EchoMessage) (*EchoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedBenchServer) mustEmbedUnimplementedBenchServer() {}

// UnsafeBenchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenchServer will
// result in compilation errors.
type UnsafeBenchServer interface {
	mustEmbedUnimplementedBenchServer()
}

func RegisterBenchServer(s grpc.ServiceRegistrar, srv BenchServer) {
	s.RegisterService(&Bench_ServiceDesc, srv)
}

func _Bench_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bench_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Bench_ServiceDesc is the grpc.ServiceDesc for Bench service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bench_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bench.Bench",
	HandlerType: (*BenchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Bench_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
