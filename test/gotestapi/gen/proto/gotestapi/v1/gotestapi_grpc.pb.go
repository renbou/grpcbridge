// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/gotestapi/v1/gotestapi.proto

package gotestapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoService_UnaryEcho_FullMethodName        = "/gotestapi.v1.EchoService/UnaryEcho"
	EchoService_ClientStreamEcho_FullMethodName = "/gotestapi.v1.EchoService/ClientStreamEcho"
	EchoService_ServerStreamEcho_FullMethodName = "/gotestapi.v1.EchoService/ServerStreamEcho"
	EchoService_BiDiStreamEcho_FullMethodName   = "/gotestapi.v1.EchoService/BiDiStreamEcho"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// UnaryEcho is a single-request single-response handler.
	// The message specified in the request is returned in the response.
	UnaryEcho(ctx context.Context, in *UnaryEchoRequest, opts ...grpc.CallOption) (*UnaryEchoResponse, error)
	// ClientStreamEcho takes in a stream of client requests containing lists of messages,
	// and then returns a single response containing an accumulated list of all the messages.
	ClientStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_ClientStreamEchoClient, error)
	// ServerStreamEcho returns one or more responses for the client request,
	// each response containing the message from the request, and the 0-based
	// index specifying how many times this message has been already repeated.
	ServerStreamEcho(ctx context.Context, in *ServerStreamEchoRequest, opts ...grpc.CallOption) (EchoService_ServerStreamEchoClient, error)
	// BiDiStreamEcho returns a single response for each client request,
	// containing the exact field and content that was sent by the client.
	BiDiStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_BiDiStreamEchoClient, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) UnaryEcho(ctx context.Context, in *UnaryEchoRequest, opts ...grpc.CallOption) (*UnaryEchoResponse, error) {
	out := new(UnaryEchoResponse)
	err := c.cc.Invoke(ctx, EchoService_UnaryEcho_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) ClientStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_ClientStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_ClientStreamEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceClientStreamEchoClient{stream}
	return x, nil
}

type EchoService_ClientStreamEchoClient interface {
	Send(*ClientStreamEchoRequest) error
	CloseAndRecv() (*ClientStreamEchoResponse, error)
	grpc.ClientStream
}

type echoServiceClientStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceClientStreamEchoClient) Send(m *ClientStreamEchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceClientStreamEchoClient) CloseAndRecv() (*ClientStreamEchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) ServerStreamEcho(ctx context.Context, in *ServerStreamEchoRequest, opts ...grpc.CallOption) (EchoService_ServerStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], EchoService_ServerStreamEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceServerStreamEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoService_ServerStreamEchoClient interface {
	Recv() (*ServerStreamEchoResponse, error)
	grpc.ClientStream
}

type echoServiceServerStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceServerStreamEchoClient) Recv() (*ServerStreamEchoResponse, error) {
	m := new(ServerStreamEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoServiceClient) BiDiStreamEcho(ctx context.Context, opts ...grpc.CallOption) (EchoService_BiDiStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], EchoService_BiDiStreamEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServiceBiDiStreamEchoClient{stream}
	return x, nil
}

type EchoService_BiDiStreamEchoClient interface {
	Send(*BiDiStreamEchoRequest) error
	Recv() (*BiDiStreamEchoResponse, error)
	grpc.ClientStream
}

type echoServiceBiDiStreamEchoClient struct {
	grpc.ClientStream
}

func (x *echoServiceBiDiStreamEchoClient) Send(m *BiDiStreamEchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoServiceBiDiStreamEchoClient) Recv() (*BiDiStreamEchoResponse, error) {
	m := new(BiDiStreamEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility
type EchoServiceServer interface {
	// UnaryEcho is a single-request single-response handler.
	// The message specified in the request is returned in the response.
	UnaryEcho(context.Context, *UnaryEchoRequest) (*UnaryEchoResponse, error)
	// ClientStreamEcho takes in a stream of client requests containing lists of messages,
	// and then returns a single response containing an accumulated list of all the messages.
	ClientStreamEcho(EchoService_ClientStreamEchoServer) error
	// ServerStreamEcho returns one or more responses for the client request,
	// each response containing the message from the request, and the 0-based
	// index specifying how many times this message has been already repeated.
	ServerStreamEcho(*ServerStreamEchoRequest, EchoService_ServerStreamEchoServer) error
	// BiDiStreamEcho returns a single response for each client request,
	// containing the exact field and content that was sent by the client.
	BiDiStreamEcho(EchoService_BiDiStreamEchoServer) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServiceServer struct {
}

func (UnimplementedEchoServiceServer) UnaryEcho(context.Context, *UnaryEchoRequest) (*UnaryEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (UnimplementedEchoServiceServer) ClientStreamEcho(EchoService_ClientStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) ServerStreamEcho(*ServerStreamEchoRequest, EchoService_ServerStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) BiDiStreamEcho(EchoService_BiDiStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStreamEcho not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_UnaryEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).UnaryEcho(ctx, req.(*UnaryEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_ClientStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).ClientStreamEcho(&echoServiceClientStreamEchoServer{stream})
}

type EchoService_ClientStreamEchoServer interface {
	SendAndClose(*ClientStreamEchoResponse) error
	Recv() (*ClientStreamEchoRequest, error)
	grpc.ServerStream
}

type echoServiceClientStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceClientStreamEchoServer) SendAndClose(m *ClientStreamEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceClientStreamEchoServer) Recv() (*ClientStreamEchoRequest, error) {
	m := new(ClientStreamEchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EchoService_ServerStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamEchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).ServerStreamEcho(m, &echoServiceServerStreamEchoServer{stream})
}

type EchoService_ServerStreamEchoServer interface {
	Send(*ServerStreamEchoResponse) error
	grpc.ServerStream
}

type echoServiceServerStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceServerStreamEchoServer) Send(m *ServerStreamEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EchoService_BiDiStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).BiDiStreamEcho(&echoServiceBiDiStreamEchoServer{stream})
}

type EchoService_BiDiStreamEchoServer interface {
	Send(*BiDiStreamEchoResponse) error
	Recv() (*BiDiStreamEchoRequest, error)
	grpc.ServerStream
}

type echoServiceBiDiStreamEchoServer struct {
	grpc.ServerStream
}

func (x *echoServiceBiDiStreamEchoServer) Send(m *BiDiStreamEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoServiceBiDiStreamEchoServer) Recv() (*BiDiStreamEchoRequest, error) {
	m := new(BiDiStreamEchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotestapi.v1.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _EchoService_UnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamEcho",
			Handler:       _EchoService_ClientStreamEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamEcho",
			Handler:       _EchoService_ServerStreamEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiDiStreamEcho",
			Handler:       _EchoService_BiDiStreamEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gotestapi/v1/gotestapi.proto",
}
