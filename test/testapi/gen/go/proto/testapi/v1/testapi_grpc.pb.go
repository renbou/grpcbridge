// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/testapi/v1/testapi.proto

package testapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_UnaryEcho_FullMethodName        = "/testapi.v1.TestService/UnaryEcho"
	TestService_ClientStreamEcho_FullMethodName = "/testapi.v1.TestService/ClientStreamEcho"
	TestService_ServerStreamEcho_FullMethodName = "/testapi.v1.TestService/ServerStreamEcho"
	TestService_BiDiStreamEcho_FullMethodName   = "/testapi.v1.TestService/BiDiStreamEcho"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	UnaryEcho(ctx context.Context, in *UnaryEchoRequest, opts ...grpc.CallOption) (*UnaryEchoResponse, error)
	ClientStreamEcho(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientStreamEchoClient, error)
	ServerStreamEcho(ctx context.Context, in *ServerStreamEchoRequest, opts ...grpc.CallOption) (TestService_ServerStreamEchoClient, error)
	BiDiStreamEcho(ctx context.Context, opts ...grpc.CallOption) (TestService_BiDiStreamEchoClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) UnaryEcho(ctx context.Context, in *UnaryEchoRequest, opts ...grpc.CallOption) (*UnaryEchoResponse, error) {
	out := new(UnaryEchoResponse)
	err := c.cc.Invoke(ctx, TestService_UnaryEcho_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ClientStreamEcho(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_ClientStreamEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceClientStreamEchoClient{stream}
	return x, nil
}

type TestService_ClientStreamEchoClient interface {
	Send(*ClientStreamEchoRequest) error
	CloseAndRecv() (*ClientStreamEchoResponse, error)
	grpc.ClientStream
}

type testServiceClientStreamEchoClient struct {
	grpc.ClientStream
}

func (x *testServiceClientStreamEchoClient) Send(m *ClientStreamEchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceClientStreamEchoClient) CloseAndRecv() (*ClientStreamEchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) ServerStreamEcho(ctx context.Context, in *ServerStreamEchoRequest, opts ...grpc.CallOption) (TestService_ServerStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_ServerStreamEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceServerStreamEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_ServerStreamEchoClient interface {
	Recv() (*ServerStreamEchoResponse, error)
	grpc.ClientStream
}

type testServiceServerStreamEchoClient struct {
	grpc.ClientStream
}

func (x *testServiceServerStreamEchoClient) Recv() (*ServerStreamEchoResponse, error) {
	m := new(ServerStreamEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) BiDiStreamEcho(ctx context.Context, opts ...grpc.CallOption) (TestService_BiDiStreamEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], TestService_BiDiStreamEcho_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceBiDiStreamEchoClient{stream}
	return x, nil
}

type TestService_BiDiStreamEchoClient interface {
	Send(*BiDiStreamEchoRequest) error
	Recv() (*BiDiStreamEchoResponse, error)
	grpc.ClientStream
}

type testServiceBiDiStreamEchoClient struct {
	grpc.ClientStream
}

func (x *testServiceBiDiStreamEchoClient) Send(m *BiDiStreamEchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceBiDiStreamEchoClient) Recv() (*BiDiStreamEchoResponse, error) {
	m := new(BiDiStreamEchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	UnaryEcho(context.Context, *UnaryEchoRequest) (*UnaryEchoResponse, error)
	ClientStreamEcho(TestService_ClientStreamEchoServer) error
	ServerStreamEcho(*ServerStreamEchoRequest, TestService_ServerStreamEchoServer) error
	BiDiStreamEcho(TestService_BiDiStreamEchoServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) UnaryEcho(context.Context, *UnaryEchoRequest) (*UnaryEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (UnimplementedTestServiceServer) ClientStreamEcho(TestService_ClientStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamEcho not implemented")
}
func (UnimplementedTestServiceServer) ServerStreamEcho(*ServerStreamEchoRequest, TestService_ServerStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamEcho not implemented")
}
func (UnimplementedTestServiceServer) BiDiStreamEcho(TestService_BiDiStreamEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BiDiStreamEcho not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_UnaryEcho_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UnaryEcho(ctx, req.(*UnaryEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ClientStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).ClientStreamEcho(&testServiceClientStreamEchoServer{stream})
}

type TestService_ClientStreamEchoServer interface {
	SendAndClose(*ClientStreamEchoResponse) error
	Recv() (*ClientStreamEchoRequest, error)
	grpc.ServerStream
}

type testServiceClientStreamEchoServer struct {
	grpc.ServerStream
}

func (x *testServiceClientStreamEchoServer) SendAndClose(m *ClientStreamEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceClientStreamEchoServer) Recv() (*ClientStreamEchoRequest, error) {
	m := new(ClientStreamEchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_ServerStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamEchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).ServerStreamEcho(m, &testServiceServerStreamEchoServer{stream})
}

type TestService_ServerStreamEchoServer interface {
	Send(*ServerStreamEchoResponse) error
	grpc.ServerStream
}

type testServiceServerStreamEchoServer struct {
	grpc.ServerStream
}

func (x *testServiceServerStreamEchoServer) Send(m *ServerStreamEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_BiDiStreamEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).BiDiStreamEcho(&testServiceBiDiStreamEchoServer{stream})
}

type TestService_BiDiStreamEchoServer interface {
	Send(*BiDiStreamEchoResponse) error
	Recv() (*BiDiStreamEchoRequest, error)
	grpc.ServerStream
}

type testServiceBiDiStreamEchoServer struct {
	grpc.ServerStream
}

func (x *testServiceBiDiStreamEchoServer) Send(m *BiDiStreamEchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceBiDiStreamEchoServer) Recv() (*BiDiStreamEchoRequest, error) {
	m := new(BiDiStreamEchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testapi.v1.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _TestService_UnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamEcho",
			Handler:       _TestService_ClientStreamEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamEcho",
			Handler:       _TestService_ServerStreamEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiDiStreamEcho",
			Handler:       _TestService_BiDiStreamEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/testapi/v1/testapi.proto",
}
