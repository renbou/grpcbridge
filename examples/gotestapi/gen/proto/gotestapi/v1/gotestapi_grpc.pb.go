// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gotestapi/v1/gotestapi.proto

package gotestapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VeggieShopService_CreateShop_FullMethodName    = "/gotestapi.v1.VeggieShopService/CreateShop"
	VeggieShopService_GetShopStats_FullMethodName  = "/gotestapi.v1.VeggieShopService/GetShopStats"
	VeggieShopService_BuildPurchase_FullMethodName = "/gotestapi.v1.VeggieShopService/BuildPurchase"
	VeggieShopService_MonitorShop_FullMethodName   = "/gotestapi.v1.VeggieShopService/MonitorShop"
)

// VeggieShopServiceClient is the client API for VeggieShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VeggieShopServiceClient interface {
	// CreateShop is a unary RPC used to create a new example shop.
	CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error)
	// GetShopStats is a unary RPC used to get some purchase stats about a created shop.
	// If no shop with the specified ID exists, a NotFound status code is returned.
	GetShopStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// BuildPurchase is a client-streaming RPC used by a client to dynamically build a purchase.
	// It dynamically updates the shop's state and can be monitored using MonitorShop.
	// If no shop with the specified ID exists, a NotFound status code is returned.
	// If the client sends requests in the stream with different shop IDs, a FailedPrecondition status code is returned.
	BuildPurchase(ctx context.Context, opts ...grpc.CallOption) (VeggieShopService_BuildPurchaseClient, error)
	// MonitorShop is a server-streaming RPC used to monitor a shop's state (planned & created purchases).
	// If no shop with the specified ID exists, a NotFound status code is returned.
	MonitorShop(ctx context.Context, in *MonitorShopRequest, opts ...grpc.CallOption) (VeggieShopService_MonitorShopClient, error)
}

type veggieShopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVeggieShopServiceClient(cc grpc.ClientConnInterface) VeggieShopServiceClient {
	return &veggieShopServiceClient{cc}
}

func (c *veggieShopServiceClient) CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error) {
	out := new(CreateShopResponse)
	err := c.cc.Invoke(ctx, VeggieShopService_CreateShop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veggieShopServiceClient) GetShopStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, VeggieShopService_GetShopStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *veggieShopServiceClient) BuildPurchase(ctx context.Context, opts ...grpc.CallOption) (VeggieShopService_BuildPurchaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &VeggieShopService_ServiceDesc.Streams[0], VeggieShopService_BuildPurchase_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &veggieShopServiceBuildPurchaseClient{stream}
	return x, nil
}

type VeggieShopService_BuildPurchaseClient interface {
	Send(*BuildPurchaseRequest) error
	CloseAndRecv() (*BuildPurchaseResponse, error)
	grpc.ClientStream
}

type veggieShopServiceBuildPurchaseClient struct {
	grpc.ClientStream
}

func (x *veggieShopServiceBuildPurchaseClient) Send(m *BuildPurchaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *veggieShopServiceBuildPurchaseClient) CloseAndRecv() (*BuildPurchaseResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BuildPurchaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *veggieShopServiceClient) MonitorShop(ctx context.Context, in *MonitorShopRequest, opts ...grpc.CallOption) (VeggieShopService_MonitorShopClient, error) {
	stream, err := c.cc.NewStream(ctx, &VeggieShopService_ServiceDesc.Streams[1], VeggieShopService_MonitorShop_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &veggieShopServiceMonitorShopClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VeggieShopService_MonitorShopClient interface {
	Recv() (*MonitorShopResponse, error)
	grpc.ClientStream
}

type veggieShopServiceMonitorShopClient struct {
	grpc.ClientStream
}

func (x *veggieShopServiceMonitorShopClient) Recv() (*MonitorShopResponse, error) {
	m := new(MonitorShopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VeggieShopServiceServer is the server API for VeggieShopService service.
// All implementations must embed UnimplementedVeggieShopServiceServer
// for forward compatibility
type VeggieShopServiceServer interface {
	// CreateShop is a unary RPC used to create a new example shop.
	CreateShop(context.Context, *CreateShopRequest) (*CreateShopResponse, error)
	// GetShopStats is a unary RPC used to get some purchase stats about a created shop.
	// If no shop with the specified ID exists, a NotFound status code is returned.
	GetShopStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// BuildPurchase is a client-streaming RPC used by a client to dynamically build a purchase.
	// It dynamically updates the shop's state and can be monitored using MonitorShop.
	// If no shop with the specified ID exists, a NotFound status code is returned.
	// If the client sends requests in the stream with different shop IDs, a FailedPrecondition status code is returned.
	BuildPurchase(VeggieShopService_BuildPurchaseServer) error
	// MonitorShop is a server-streaming RPC used to monitor a shop's state (planned & created purchases).
	// If no shop with the specified ID exists, a NotFound status code is returned.
	MonitorShop(*MonitorShopRequest, VeggieShopService_MonitorShopServer) error
	mustEmbedUnimplementedVeggieShopServiceServer()
}

// UnimplementedVeggieShopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVeggieShopServiceServer struct {
}

func (UnimplementedVeggieShopServiceServer) CreateShop(context.Context, *CreateShopRequest) (*CreateShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedVeggieShopServiceServer) GetShopStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopStats not implemented")
}
func (UnimplementedVeggieShopServiceServer) BuildPurchase(VeggieShopService_BuildPurchaseServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildPurchase not implemented")
}
func (UnimplementedVeggieShopServiceServer) MonitorShop(*MonitorShopRequest, VeggieShopService_MonitorShopServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorShop not implemented")
}
func (UnimplementedVeggieShopServiceServer) mustEmbedUnimplementedVeggieShopServiceServer() {}

// UnsafeVeggieShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VeggieShopServiceServer will
// result in compilation errors.
type UnsafeVeggieShopServiceServer interface {
	mustEmbedUnimplementedVeggieShopServiceServer()
}

func RegisterVeggieShopServiceServer(s grpc.ServiceRegistrar, srv VeggieShopServiceServer) {
	s.RegisterService(&VeggieShopService_ServiceDesc, srv)
}

func _VeggieShopService_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeggieShopServiceServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VeggieShopService_CreateShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeggieShopServiceServer).CreateShop(ctx, req.(*CreateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VeggieShopService_GetShopStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VeggieShopServiceServer).GetShopStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VeggieShopService_GetShopStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VeggieShopServiceServer).GetShopStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VeggieShopService_BuildPurchase_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VeggieShopServiceServer).BuildPurchase(&veggieShopServiceBuildPurchaseServer{stream})
}

type VeggieShopService_BuildPurchaseServer interface {
	SendAndClose(*BuildPurchaseResponse) error
	Recv() (*BuildPurchaseRequest, error)
	grpc.ServerStream
}

type veggieShopServiceBuildPurchaseServer struct {
	grpc.ServerStream
}

func (x *veggieShopServiceBuildPurchaseServer) SendAndClose(m *BuildPurchaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *veggieShopServiceBuildPurchaseServer) Recv() (*BuildPurchaseRequest, error) {
	m := new(BuildPurchaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VeggieShopService_MonitorShop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorShopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VeggieShopServiceServer).MonitorShop(m, &veggieShopServiceMonitorShopServer{stream})
}

type VeggieShopService_MonitorShopServer interface {
	Send(*MonitorShopResponse) error
	grpc.ServerStream
}

type veggieShopServiceMonitorShopServer struct {
	grpc.ServerStream
}

func (x *veggieShopServiceMonitorShopServer) Send(m *MonitorShopResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VeggieShopService_ServiceDesc is the grpc.ServiceDesc for VeggieShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VeggieShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotestapi.v1.VeggieShopService",
	HandlerType: (*VeggieShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShop",
			Handler:    _VeggieShopService_CreateShop_Handler,
		},
		{
			MethodName: "GetShopStats",
			Handler:    _VeggieShopService_GetShopStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildPurchase",
			Handler:       _VeggieShopService_BuildPurchase_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MonitorShop",
			Handler:       _VeggieShopService_MonitorShop_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gotestapi/v1/gotestapi.proto",
}
